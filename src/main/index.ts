// utils
const path = require("path");
const robotjs = require("robotjs");
const { app, BrowserWindow, ipcMain } = require("electron");

require("@electron/remote/main").initialize();

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 250,
    height: 80,
    frame: false,
    resizable: false,
    alwaysOnTop: true,
    webPreferences: {
      plugins: true,
      nodeIntegration: true,
      contextIsolation: false,
      enableRemoteModule: true,
    },
  });

  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // mainWindow.webContents.openDevTools();
  require("@electron/remote/main").enable(mainWindow.webContents);

  ipcMain.on("get-mouse-pixel", (event: any, arg: any) => {
    const mousePos = robotjs.getMousePos();
    const color = robotjs.getPixelColor(mousePos.x, mousePos.y);

    event.reply("get-mouse-pixel", color);
  });
};

app.allowRendererProcessReuse = false;

app.on("ready", createWindow);

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
